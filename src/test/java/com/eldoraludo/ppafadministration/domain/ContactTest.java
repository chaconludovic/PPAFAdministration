/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package com.eldoraludo.ppafadministration.domain;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import com.eldoraludo.ppafadministration.util.*;
import static javax.persistence.CascadeType.ALL;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import com.eldoraludo.ppafadministration.domain.Suivicontact;
import com.eldoraludo.ppafadministration.domain.Vente;

/**
 * Basic tests for Contact
 */
@SuppressWarnings("unused")
public class ContactTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Contact model = new Contact();
        assertFalse(model.isIdSet());
    }

    @Test
    public void isIdSetReturnsTrue() {
        Contact model = new Contact();
        model.setId(ValueGenerator.getUniqueInteger());
        assertNotNull(model.getId());
        assertTrue(model.isIdSet());
    }

    // test columns methods

    //-------------------------------------------------------------
    // One to Many: SimpleOneToMany CONTACT.ID ==> SUIVICONTACT.contact_id
    //-------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // suivicontact.suivicontact <-- contact.contacts
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void oneToMany_addSuivicontact() {
        Contact one = new Contact();
        Suivicontact many = new Suivicontact();

        // init
        one.addSuivicontact(many);

        // make sure it is propagated
        assertTrue(one.containsSuivicontact(many));
        assertTrue(one.equals(many.getContact()));

        // now set it to null
        one.removeSuivicontact(many);

        // make sure null is propagated
        assertFalse(one.containsSuivicontact(many));
        assertNull(many.getContact());
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // vente.vente <-- contact.contacts
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void oneToMany_addVente() {
        Contact one = new Contact();
        Vente many = new Vente();

        // init
        one.addVente(many);

        // make sure it is propagated
        assertTrue(one.containsVente(many));
        assertTrue(one.equals(many.getContact()));

        // now set it to null
        one.removeVente(many);

        // make sure null is propagated
        assertFalse(one.containsVente(many));
        assertNull(many.getContact());
    }

    @Test
    public void toStringNotNull() {
        Contact model = new Contact();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingBusinessKey() {
        Contact model1 = new Contact();
        Contact model2 = new Contact();
        String nom = "a";
        model1.setNom(nom);
        model2.setNom(nom);
        String prenom = "a";
        model1.setPrenom(prenom);
        model2.setPrenom(prenom);
        String email = "dummy@dummy.com";
        model1.setEmail(email);
        model2.setEmail(email);
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
        assertTrue(model1.hashCode() == model2.hashCode());
    }
}