/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.eldoraludo.ppafadministration.domain;

import static javax.persistence.CascadeType.ALL;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import com.eldoraludo.ppafadministration.domain.Suivicontact;
import com.eldoraludo.ppafadministration.domain.Vente;
import com.google.common.base.Objects;

@Entity
@Table(name = "CONTACT")
@Cache(usage = NONSTRICT_READ_WRITE)
public class Contact implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Contact.class);

    // Raw attributes
    private Integer id; // pk
    private String nom; // not null
    private String prenom; // not null
    private String numerotelephone1;
    private String numerotelephone2;
    private String email; // not null
    private Boolean actif; // not null
    private String note;
    private String rue;
    private String ville;
    private String codepostal;
    private String infosuppl;

    // One to many
    private List<Suivicontact> suivicontacts = new ArrayList<Suivicontact>();
    private List<Vente> ventes = new ArrayList<Vente>();

    // ---------------------------
    // Constructors
    // ---------------------------

    public Contact() {
    }

    public Contact(Integer primaryKey) {
        setId(primaryKey);
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @Column(name = "ID", precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [nom] ------------------------

    @Size(max = 255)
    @NotEmpty
    @Column(nullable = false)
    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    // -- [prenom] ------------------------

    @Size(max = 255)
    @NotEmpty
    @Column(nullable = false)
    public String getPrenom() {
        return prenom;
    }

    public void setPrenom(String prenom) {
        this.prenom = prenom;
    }

    // -- [numerotelephone1] ------------------------

    @Size(max = 255)
    @Column(name = "numeroTelephone1")
    public String getNumerotelephone1() {
        return numerotelephone1;
    }

    public void setNumerotelephone1(String numerotelephone1) {
        this.numerotelephone1 = numerotelephone1;
    }

    // -- [numerotelephone2] ------------------------

    @Size(max = 255)
    @Column(name = "numeroTelephone2")
    public String getNumerotelephone2() {
        return numerotelephone2;
    }

    public void setNumerotelephone2(String numerotelephone2) {
        this.numerotelephone2 = numerotelephone2;
    }

    // -- [email] ------------------------

    @Size(max = 255)
    @NotEmpty
    @Email
    @Column(nullable = false)
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // -- [actif] ------------------------

    @NotNull
    @Column(name = "ACTIF", nullable = false, length = 1)
    public Boolean getActif() {
        return actif;
    }

    public void setActif(Boolean actif) {
        this.actif = actif;
    }

    // -- [note] ------------------------

    @Size(max = 2147483647)
    @Basic(fetch = FetchType.LAZY)
    @Column(name = "NOTE")
    @Lob
    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    // -- [rue] ------------------------

    @Size(max = 255)
    @Column(name = "RUE")
    public String getRue() {
        return rue;
    }

    public void setRue(String rue) {
        this.rue = rue;
    }

    // -- [ville] ------------------------

    @Size(max = 255)
    @Column(name = "VILLE")
    public String getVille() {
        return ville;
    }

    public void setVille(String ville) {
        this.ville = ville;
    }

    // -- [codepostal] ------------------------

    @Size(max = 255)
    @Column(name = "codePostal")
    public String getCodepostal() {
        return codepostal;
    }

    public void setCodepostal(String codepostal) {
        this.codepostal = codepostal;
    }

    // -- [infosuppl] ------------------------

    @Size(max = 2147483647)
    @Basic(fetch = FetchType.LAZY)
    @Column(name = "infoSuppl")
    @Lob
    public String getInfosuppl() {
        return infosuppl;
    }

    public void setInfosuppl(String infosuppl) {
        this.infosuppl = infosuppl;
    }

    // --------------------------------------------------------------------
    // One to Many support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: contact ==> suivicontacts
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @OneToMany(mappedBy = "contact", orphanRemoval = true, cascade = ALL)
    public List<Suivicontact> getSuivicontacts() {
        return suivicontacts;
    }

    /**
     * Set the {@link Suivicontact} list.
     * It is recommended to use the helper method {@link #addSuivicontact(Suivicontact)} / {@link #removeSuivicontact(Suivicontact)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param suivicontacts the list to set
     */
    public void setSuivicontacts(List<Suivicontact> suivicontacts) {
        this.suivicontacts = suivicontacts;
    }

    /**
     * Helper method to add the passed {@link Suivicontact} to the suivicontacts list
     * and set this contact on the passed suivicontact to preserve referential
     * integrity at the object level.
     *
     * @param suivicontact the to add
     * @return true if the suivicontact could be added to the suivicontacts list, false otherwise
     */
    public boolean addSuivicontact(Suivicontact suivicontact) {
        if (getSuivicontacts().add(suivicontact)) {
            suivicontact.setContact((Contact) this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to determine if the passed {@link Suivicontact} is already present in the suivicontacts list.
     *
     * @param suivicontact the instance to look up.
     * @return true if the suivicontacts list contains the passed suivicontact, false otherwise.
     */
    public boolean containsSuivicontact(Suivicontact suivicontact) {
        return getSuivicontacts() != null && getSuivicontacts().contains(suivicontact);
    }

    /**
     * Helper method to remove the passed {@link Suivicontact} from the suivicontacts list and unset
     * this contact from the passed suivicontact to preserve referential integrity at the object level.
     *
     * @param suivicontact the instance to remove
     * @return true if the suivicontact could be removed from the suivicontacts list, false otherwise
     */
    public boolean removeSuivicontact(Suivicontact suivicontact) {
        if (getSuivicontacts().remove(suivicontact)) {
            suivicontact.setContact(null);
            return true;
        }
        return false;
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: contact ==> ventes
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @OneToMany(mappedBy = "contact", orphanRemoval = true, cascade = ALL)
    public List<Vente> getVentes() {
        return ventes;
    }

    /**
     * Set the {@link Vente} list.
     * It is recommended to use the helper method {@link #addVente(Vente)} / {@link #removeVente(Vente)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param ventes the list to set
     */
    public void setVentes(List<Vente> ventes) {
        this.ventes = ventes;
    }

    /**
     * Helper method to add the passed {@link Vente} to the ventes list
     * and set this contact on the passed vente to preserve referential
     * integrity at the object level.
     *
     * @param vente the to add
     * @return true if the vente could be added to the ventes list, false otherwise
     */
    public boolean addVente(Vente vente) {
        if (getVentes().add(vente)) {
            vente.setContact((Contact) this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to determine if the passed {@link Vente} is already present in the ventes list.
     *
     * @param vente the instance to look up.
     * @return true if the ventes list contains the passed vente, false otherwise.
     */
    public boolean containsVente(Vente vente) {
        return getVentes() != null && getVentes().contains(vente);
    }

    /**
     * Helper method to remove the passed {@link Vente} from the ventes list and unset
     * this contact from the passed vente to preserve referential integrity at the object level.
     *
     * @param vente the instance to remove
     * @return true if the vente could be removed from the ventes list, false otherwise
     */
    public boolean removeVente(Vente vente) {
        if (getVentes().remove(vente)) {
            vente.setContact(null);
            return true;
        }
        return false;
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Contact && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getNom(), getPrenom(), getEmail());
        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warn("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this Contact instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("id", getId()) //
                .add("nom", getNom()) //
                .add("prenom", getPrenom()) //
                .add("numerotelephone1", getNumerotelephone1()) //
                .add("numerotelephone2", getNumerotelephone2()) //
                .add("email", getEmail()) //
                .add("actif", getActif()) //
                .add("note", getNote()) //
                .add("rue", getRue()) //
                .add("ville", getVille()) //
                .add("codepostal", getCodepostal()) //
                .add("infosuppl", getInfosuppl()) //
                .toString();
    }
}