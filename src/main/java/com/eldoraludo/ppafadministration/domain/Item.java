/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.eldoraludo.ppafadministration.domain;

import static javax.persistence.CascadeType.ALL;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Size;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.validator.constraints.NotEmpty;
import com.eldoraludo.ppafadministration.domain.Itemlieudestockage;
import com.eldoraludo.ppafadministration.domain.Vente;
import com.google.common.base.Objects;

@Entity
@Table(name = "ITEM")
@Cache(usage = NONSTRICT_READ_WRITE)
public class Item implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Item.class);

    // Raw attributes
    private Integer id; // pk
    private String nom; // not null
    private String reference; // not null
    private String note;

    // One to many
    private List<Itemlieudestockage> itemlieudestockages = new ArrayList<Itemlieudestockage>();
    private List<Vente> ventes = new ArrayList<Vente>();

    // ---------------------------
    // Constructors
    // ---------------------------

    public Item() {
    }

    public Item(Integer primaryKey) {
        setId(primaryKey);
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @Column(name = "ID", precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [nom] ------------------------

    @Size(max = 255)
    @NotEmpty
    @Column(nullable = false)
    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    // -- [reference] ------------------------

    @Size(max = 255)
    @NotEmpty
    @Column(name = "REFERENCE", nullable = false)
    public String getReference() {
        return reference;
    }

    public void setReference(String reference) {
        this.reference = reference;
    }

    // -- [note] ------------------------

    @Size(max = 2147483647)
    @Basic(fetch = FetchType.LAZY)
    @Column(name = "NOTE")
    @Lob
    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    // --------------------------------------------------------------------
    // One to Many support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: item ==> itemlieudestockages
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @OneToMany(mappedBy = "item", orphanRemoval = true, cascade = ALL)
    public List<Itemlieudestockage> getItemlieudestockages() {
        return itemlieudestockages;
    }

    /**
     * Set the {@link Itemlieudestockage} list.
     * It is recommended to use the helper method {@link #addItemlieudestockage(Itemlieudestockage)} / {@link #removeItemlieudestockage(Itemlieudestockage)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param itemlieudestockages the list to set
     */
    public void setItemlieudestockages(List<Itemlieudestockage> itemlieudestockages) {
        this.itemlieudestockages = itemlieudestockages;
    }

    /**
     * Helper method to add the passed {@link Itemlieudestockage} to the itemlieudestockages list
     * and set this item on the passed itemlieudestockage to preserve referential
     * integrity at the object level.
     *
     * @param itemlieudestockage the to add
     * @return true if the itemlieudestockage could be added to the itemlieudestockages list, false otherwise
     */
    public boolean addItemlieudestockage(Itemlieudestockage itemlieudestockage) {
        if (getItemlieudestockages().add(itemlieudestockage)) {
            itemlieudestockage.setItem((Item) this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to determine if the passed {@link Itemlieudestockage} is already present in the itemlieudestockages list.
     *
     * @param itemlieudestockage the instance to look up.
     * @return true if the itemlieudestockages list contains the passed itemlieudestockage, false otherwise.
     */
    public boolean containsItemlieudestockage(Itemlieudestockage itemlieudestockage) {
        return getItemlieudestockages() != null && getItemlieudestockages().contains(itemlieudestockage);
    }

    /**
     * Helper method to remove the passed {@link Itemlieudestockage} from the itemlieudestockages list and unset
     * this item from the passed itemlieudestockage to preserve referential integrity at the object level.
     *
     * @param itemlieudestockage the instance to remove
     * @return true if the itemlieudestockage could be removed from the itemlieudestockages list, false otherwise
     */
    public boolean removeItemlieudestockage(Itemlieudestockage itemlieudestockage) {
        if (getItemlieudestockages().remove(itemlieudestockage)) {
            itemlieudestockage.setItem(null);
            return true;
        }
        return false;
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: item ==> ventes
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @OneToMany(mappedBy = "item", orphanRemoval = true, cascade = ALL)
    public List<Vente> getVentes() {
        return ventes;
    }

    /**
     * Set the {@link Vente} list.
     * It is recommended to use the helper method {@link #addVente(Vente)} / {@link #removeVente(Vente)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param ventes the list to set
     */
    public void setVentes(List<Vente> ventes) {
        this.ventes = ventes;
    }

    /**
     * Helper method to add the passed {@link Vente} to the ventes list
     * and set this item on the passed vente to preserve referential
     * integrity at the object level.
     *
     * @param vente the to add
     * @return true if the vente could be added to the ventes list, false otherwise
     */
    public boolean addVente(Vente vente) {
        if (getVentes().add(vente)) {
            vente.setItem((Item) this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to determine if the passed {@link Vente} is already present in the ventes list.
     *
     * @param vente the instance to look up.
     * @return true if the ventes list contains the passed vente, false otherwise.
     */
    public boolean containsVente(Vente vente) {
        return getVentes() != null && getVentes().contains(vente);
    }

    /**
     * Helper method to remove the passed {@link Vente} from the ventes list and unset
     * this item from the passed vente to preserve referential integrity at the object level.
     *
     * @param vente the instance to remove
     * @return true if the vente could be removed from the ventes list, false otherwise
     */
    public boolean removeVente(Vente vente) {
        if (getVentes().remove(vente)) {
            vente.setItem(null);
            return true;
        }
        return false;
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Item && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getNom());
        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warn("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this Item instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("id", getId()) //
                .add("nom", getNom()) //
                .add("reference", getReference()) //
                .add("note", getNote()) //
                .toString();
    }
}